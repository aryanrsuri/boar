/* 
 * Kline has explicit width data types
 *           bool := maps to u1 => 0 or 1
 *           char := u8
 *     signed int := s8, s16, s32, s64, s128, int (32 or 64 depending on architecture)
 *   unsigned int := u8, u16, u32, u64, u128, uint (32 or 64 depending on architecture)
 * floating point := f32, f64, float (32 or 64 depending on architecture)
 *
*/

using std.fmt
using std.error

/// Primitive Bindings
let number: u64 = 234
let tru: bool = true
let str: string = "432"
let pi: f32 = 3.1415
// mutable value

var c: char = 64

/// Type Composition
 
// Defining a 2-len tuple of f32 
type coord = (f32,f32)

// Alias
type number = int


/// Collections 

// Array: Fixed length contigous and homogenous list
var A: [3]u32 = [1,2,3]

// Tuple: Fixed size heterogenous product list
 T: Tup<u32,u32,char> = (1,1,64)

// Map: finite mapping over one set to another , a mathematical function
var M: Map<string, u32> = Map{"hello": 1, "world": 2}

// Vector: Dynamic length contigous collection using SIMD instructions
var Vc: Vec<u32> = Vec{1,2,3}
Vc.push(3)

// Record: Fixed size hetergenous product list keyed by a `field`

struct gpu = {
cmd_fifo: u32,
cmd_begin: u32,
cmd_end: u32,
cmd_char: u8,
}

// Polymorphic records

struct pair<T,P> = {
first: T,
second: P,
}

// Enumerated type Hashable = {
Hash: string,
Err: string,
}

// Polymorphic enums
enum Maybe<T> = {
Just: T,
Nothing,
}

enum Either<E,T> = {
Left: E,
Right: T,
}


type r_gpu = Either<gpu,error> 
fn op(opids: (u32,u32,u32,u8)): r_gpu
{
  if opids.1 > opids.2 {
    return r_gpu.Left(error.InvalidOperation)
  }
  let g: gpu = .{ 
  .cmd_fifo = opids.1,
  .cmd_begin = opids.2, 
  .cmd_end = opids.3, 
  .cmd_char = opids.4 
  }
  return r_gpu.Right(g)
}

fn realness(n: sint): Maybe<uint> 
{
  if n > 0 {
    var real: Maybe<uint> = Maybe<uint>.Just(n)
    return Maybe.Just((uint)n)
  }
  return Maybe.Nothing
}

fn hash(content: string): Hashable
{
  if content.size() > 0 {
    int i = 0
    for i < content.size() {
      content[i] = i % 255 
      i+=1
    }
    return Hashable.Hash(content)
  } 
  return Hashable.Err("Null content length")
}

fn repr(content: string): ()
{
  fmt.println("%s", content)
  return ()
}
