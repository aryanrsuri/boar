/** 
 * 
 * [Author] Aryan Suri
 * [Licence] MIT
 * [Copyright] Aryan Suri 2025
 * [Manifest] Boar is a pragmatic language while the productive programmer
 * 
**/

/** Notes:
 * 
 *  Boar has explicit width data types, 8-128, with a `int` width based on CPU Architecture
 *  Strings `str` are first class, functionally equivilant to a char[], with a begin ptr and length;
 *            bool := maps to u1 => 0 or 1 
 *            char := u8
 *      signed int := s8, s16, s32, s64, s128, u_int (32 or 64 depending on architecture)
 *    unsigned int := u8, u16, u32, u64, u128, s_int (32 or 64 depending on architecture)
 *  floating point := f32, f64, float (32 or 64 depending on architecture)
**/

using std.*;
// using std.int;
// using std.float;
// using std.math;
// using std.sort;
// using std.string;

s64 a = 234;
bool truth = true;
str b = "432";
f32 f = 3.55;
char c = 64;
u32[3] A = [1,2,3];
std::vec<u32> V = [1,2,3];


std::fmt("%d\n", A[0]);
type coord = (f32,f32);
type Vec3<T> = (T,T,T);
coord C = (0.0,1.11);
type number = int;

struct gpu = {
u32 cmd_fifo;
u32 cmd_begin;
u32 cmd_end;
u8 cmd_char;
}

struct pair<T,P> = {
T first;
P second;
}

struct shape = {
int h;
int w;
}

enum commit = {
str Hash;
int Err;
nil;
}

enum option<T> = {
T Some;
nil;
}

enum result<T,E> = {
T Ok;
E Err;
}

struct err = {
int code;
str msg;
}

fn try_this(s_int n) result<s_int, err>
{
  result<s_int, err> r;
  if (n > 0) {
    return r::Ok(n);
  }
  err E = { .code = 10, .msg = "[err] this\n" };
  return r::Err(E);
}
    


fn hash(str content) str
{
  if content.size() > 0 {
    int i = 0;
    while i < str.size() {
      content[i] = i % (64 / str.size()) % 255;
      ++i;
    }
  }

  return content;
}

fn fold(int[10] numbers) int
{
  int i = 0;
  int sum = 0;
  while i < numbers.size() {
    sum += numbers[i];
    ++i;
  }

  return sum;
}

fn pretty(int[10] numbers) nil
{
  int i = 0;
  while i < numbers.size() {
    std::fmt("<%d>, ", numbers[i]);
    ++i;
  }

  return nil;
}


fn main(int argv, str[10] args) int
{
  if args[0] > 0 {
    std::fmt("[ERR] %d\n", argv);
  } else {
    std::fmt("[INFO] %d\n", argv);
  }

  commit first_commit = commit::Err(0);
  match first_commit {
    Hash (s) => std::fmt("%s\n", s),
    Err (n) => std::fmt("%d\n", n),
    nil => std::exit(0),
  }

  fn sq(int n) int { return n*n };
  std::fmt("%d\n", sq(10));



  return 0;
}


